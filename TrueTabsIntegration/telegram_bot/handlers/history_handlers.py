import json # –î–æ–±–∞–≤–ª–µ–Ω –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≤ –±—É–¥—É—â–µ–º
from aiogram import Router, F, Bot # –î–æ–±–∞–≤–ª–µ–Ω Bot –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞
from aiogram.types import CallbackQuery, InlineKeyboardButton, FSInputFile # –î–æ–±–∞–≤–ª–µ–Ω InlineKeyboardButton, FSInputFile
from aiogram.utils.keyboard import InlineKeyboardBuilder # –î–æ–±–∞–≤–ª–µ–Ω InlineKeyboardBuilder
from ..keyboards import history_pagination_keyboard, main_menu_keyboard
from ..database.sqlite_db import get_upload_history, count_upload_history, get_upload_history_by_id # –î–æ–±–∞–≤–ª–µ–Ω get_upload_history_by_id
import os
import sys
from datetime import datetime

router = Router()

RECORDS_PER_PAGE = 5

@router.callback_query(F.data.startswith("view_history:"))
async def handle_view_history(callback: CallbackQuery):
    try:
        offset = int(callback.data.split(":")[1])
    except (IndexError, ValueError):
        offset = 0

    total_records = await count_upload_history()
    # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ offset –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
    if offset >= total_records and total_records > 0:
        offset = max(0, total_records - RECORDS_PER_PAGE)


    history_records = await get_upload_history(limit=RECORDS_PER_PAGE, offset=offset)

    text = "üìä <b>–ò—Å—Ç–æ—Ä–∏—è –∑–∞–≥—Ä—É–∑–æ–∫:</b>\n\n"
    builder = InlineKeyboardBuilder() # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–∏–ª–¥–µ—Ä –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–Ω–æ–ø–æ–∫ –∑–∞–ø–∏—Å–µ–π –∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏

    if not history_records:
        text = "–ò—Å—Ç–æ—Ä–∏—è –∑–∞–≥—Ä—É–∑–æ–∫ –ø—É—Å—Ç–∞."
        # –ï—Å–ª–∏ –∏—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞, –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –Ω–∞–∑–∞–¥ –≤ –º–µ–Ω—é
        builder.row(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="main_menu"))
    else:
        for record in history_records:
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            timestamp_local = datetime.fromisoformat(record["timestamp"]).strftime("%Y-%m-%d %H:%M:%S")
            # –ö—Ä–∞—Ç–∫–∞—è —Å–≤–æ–¥–∫–∞ –¥–ª—è —Å–ø–∏—Å–∫–∞
            record_summary = f"#{record['id']}: {timestamp_local} - {record['source_type']} - {'‚úÖ –£—Å–ø–µ—Ö' if record['status'] == 'SUCCESS' else '‚ùå –û—à–∏–±–∫–∞'}"
            text += f"{record_summary}\n"
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–î–µ—Ç–∞–ª–∏" –¥–ª—è –∫–∞–∂–¥–æ–π –∑–∞–ø–∏—Å–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω—É—é —Å—Ç—Ä–æ–∫—É
            builder.row(InlineKeyboardButton(text=f"üëÅÔ∏è –î–µ—Ç–∞–ª–∏ #{record['id']}", callback_data=f"view_history_details:{record['id']}"))
        text += "---\n" # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –ø–µ—Ä–µ–¥ –∫–Ω–æ–ø–∫–∞–º–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        prev_offset = max(0, offset - RECORDS_PER_PAGE)
        next_offset = offset + RECORDS_PER_PAGE
        has_prev = offset > 0
        has_next = next_offset < total_records

        pagination_buttons = []
        if has_prev:
            pagination_buttons.append(InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data=f"view_history:{prev_offset}"))
        current_page_start = offset + 1
        current_page_end = min(offset + RECORDS_PER_PAGE, total_records)
        pagination_buttons.append(InlineKeyboardButton(text=f"{current_page_start}-{current_page_end} –∏–∑ {total_records}", callback_data="ignore")) # –ö–Ω–æ–ø–∫–∞ "–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å" –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        if has_next:
            pagination_buttons.append(InlineKeyboardButton(text="‚û°Ô∏è", callback_data=f"view_history:{next_offset}"))

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É (–µ—Å–ª–∏ –µ—Å—Ç—å)
        if pagination_buttons:
             builder.row(*pagination_buttons)

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é"
        builder.row(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="main_menu"))

    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await callback.message.edit_text(text, reply_markup=builder.as_markup(), parse_mode='HTML') # –ò—Å–ø–æ–ª—å–∑—É–µ–º as_markup() –±–∏–ª–¥–µ—Ä–∞
    await callback.answer()

# --- –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏ –∏—Å—Ç–æ—Ä–∏–∏ ---
@router.callback_query(F.data.startswith("view_history_details:"))
async def handle_view_history_details(callback: CallbackQuery, bot: Bot): # –î–æ–±–∞–≤–ª–µ–Ω bot –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞
    try:
        record_id = int(callback.data.split(":")[1])
    except (IndexError, ValueError):
        await callback.message.edit_text("–ù–µ–≤–µ—Ä–Ω—ã–π ID –∑–∞–ø–∏—Å–∏ –∏—Å—Ç–æ—Ä–∏–∏.")
        await callback.answer()
        return

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é –∑–∞–ø–∏—Å—å –∏—Å—Ç–æ—Ä–∏–∏ –∏–∑ –ë–î –ø–æ ID
    record = await get_upload_history_by_id(record_id) # –ù—É–∂–Ω–∞ —ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –≤ sqlite_db.py

    if not record:
        await callback.message.edit_text(f"–ó–∞–ø–∏—Å—å –∏—Å—Ç–æ—Ä–∏–∏ —Å ID #{record_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        await callback.answer()
        return

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    details_text = f"üìä <b>–î–µ—Ç–∞–ª–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏ #{record['id']}</b>\n\n"
    timestamp_local = datetime.fromisoformat(record["timestamp"]).strftime("%Y-%m-%d %H:%M:%S")
    details_text += f"–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: {timestamp_local}\n"
    details_text += f"–ò—Å—Ç–æ—á–Ω–∏–∫: <code>{record['source_type']}</code>\n"
    details_text += f"–°—Ç–∞—Ç—É—Å: {'‚úÖ –£—Å–ø–µ—Ö' if record['status'] == 'SUCCESS' else '‚ùå –û—à–∏–±–∫–∞'}\n"
    if record['duration_seconds'] is not None:
        details_text += f"–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {record['duration_seconds']:.2f} —Å–µ–∫\n"
    if record['file_path']:
        details_text += f"–§–∞–π–ª: <code>{os.path.basename(record['file_path'])}</code>\n" # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∏–º—è —Ñ–∞–π–ª–∞
    if record['true_tabs_datasheet_id'] and record['true_tabs_datasheet_id'] != 'N/A':
        details_text += f"Datasheet ID: <code>{record['true_tabs_datasheet_id']}</code>\n"

    # –ü–æ–ª–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ, –µ—Å–ª–∏ –µ—Å—Ç—å –∏ —Å—Ç–∞—Ç—É—Å - –û—à–∏–±–∫–∞
    if record['error_message'] and record['status'] == 'ERROR':
        details_text += f"\n<b>–°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ:</b>\n<pre><code>{record['error_message']}</code></pre>\n"

    if record.get('parameters'): # –ï—Å–ª–∏ –ø–æ–ª–µ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –∑–∞–ø–∏—Å–∏ –∏—Å—Ç–æ—Ä–∏–∏
         try:
              params_display = json.dumps(json.loads(record['parameters']), indent=2, ensure_ascii=False)
              details_text += f"\n<b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:</b>\n<pre><code class=\"language-json\">{params_display}</code></pre>\n"
         except Exception:
              details_text += f"\n<b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:</b> <code>–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON</code>\n"


    builder = InlineKeyboardBuilder()
    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞, –µ—Å–ª–∏ –æ–ø–µ—Ä–∞—Ü–∏—è –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ–π –∏ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –±–æ—Ç–∞
    if record['status'] == 'SUCCESS' and record['file_path'] and os.path.exists(record['file_path']):
         builder.row(InlineKeyboardButton(text="üìé –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª", callback_data=f"send_history_file:{record['id']}"))

    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å–ø–∏—Å–∫—É –∏—Å—Ç–æ—Ä–∏–∏ (–Ω–∞ –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É)
    builder.row(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data=f"view_history:0"))

    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –∏ –∫–Ω–æ–ø–∫–∞–º–∏ –¥–µ–π—Å—Ç–≤–∏–π
    await callback.message.edit_text(details_text, reply_markup=builder.as_markup(), parse_mode='HTML')
    await callback.answer()

# --- –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞ –∏—Å—Ç–æ—Ä–∏–∏ ---
@router.callback_query(F.data.startswith("send_history_file:"))
async def handle_send_history_file(callback: CallbackQuery, bot: Bot):
    try:
        record_id = int(callback.data.split(":")[1])
    except (IndexError, ValueError):
        await callback.answer("–ù–µ–≤–µ—Ä–Ω—ã–π ID –∑–∞–ø–∏—Å–∏ –∏—Å—Ç–æ—Ä–∏–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞.")
        return

    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å—å –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ ID
    record = await get_upload_history_by_id(record_id) # –ù—É–∂–Ω–∞ —ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –≤ sqlite_db.py

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–ø–∏—Å—å –Ω–∞–π–¥–µ–Ω–∞, —Å—Ç–∞—Ç—É—Å –£—Å–ø–µ—Ö, –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –µ—Å—Ç—å –∏ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if not record or record['status'] != 'SUCCESS' or not record['file_path'] or not os.path.exists(record['file_path']):
        await callback.answer("–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –æ–ø–µ—Ä–∞—Ü–∏—è –Ω–µ –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ–π.")
        return

    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await bot.send_document(callback.message.chat.id, document=FSInputFile(record['file_path'], filename=os.path.basename(record['file_path'])))
        await callback.answer("–§–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞ –∏—Å—Ç–æ—Ä–∏–∏: {e}", file=sys.stderr)
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞.")


@router.callback_query(F.data == "ignore")
async def handle_ignore_callback(callback: CallbackQuery):
    # –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –∫–Ω–æ–ø–æ–∫, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –ø—Ä–æ—Å—Ç–æ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∫–Ω–æ–ø–∫–∞ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–∞–≥–∏–Ω–∞—Ü–∏–∏)
    await callback.answer()