import asyncio
import logging
import sys
from typing import Union
from aiogram import Router, F
from aiogram.filters import CommandStart, StateFilter
from aiogram.fsm.context import FSMContext # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ
import json
import io
import csv
import httpx
from aiogram.types import CallbackQuery, FSInputFile, Message, InlineKeyboardMarkup, InlineKeyboardButton
from telegram_bot.keyboards.inline_with_export_update import main_menu_keyboard
from telegram_bot.database import get_tt_config
from telegram_bot.utils.encryption import decrypt_data


from ..keyboards.inline import main_menu_keyboard # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
# from .upload_handlers import UploadProcess # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∞—Å—Å—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ
# from .config_handlers import ConfigProcess
# from .scheduled_handlers import ScheduleProcess # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∞—Å—Å—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ

logger = logging.getLogger(__name__) # –õ–æ–≥–≥–µ—Ä –¥–ª—è start_handlers

router = Router()

# –•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –∫–æ–º–∞–Ω–¥—É /start
@router.message(CommandStart())
async def command_start_handler(message: Message, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start. –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.
    –¢–∞–∫–∂–µ –æ—á–∏—â–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å.
    """
    await state.clear() # –û—á–∏—â–∞–µ–º –ª—é–±–æ–µ —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ

    welcome_text = (
        f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.full_name}! üëã\n"
        f"–Ø –±–æ—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –≤ True Tabs –∏–∑ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ —Å –ø–æ–º–æ—â—å—é Rust —É—Ç–∏–ª–∏—Ç—ã.\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )
    await message.answer(welcome_text, reply_markup=main_menu_keyboard())
    logger.info(f"Received /start command from user {message.from_user.id}")

# –û–±—â–∏–π —Ö—ç–Ω–¥–ª–µ—Ä –¥–ª—è –∫–Ω–æ–ø–∫–∏ "‚ùå –û—Ç–º–µ–Ω–∞" –∏–ª–∏ callback "cancel"
# –û–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –Ω–∞ —É—Ä–æ–≤–Ω–µ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ –∏–ª–∏ –≤ —Ä–æ—É—Ç–µ—Ä–µ, –∫–æ—Ç–æ—Ä—ã–π –≤–∫–ª—é—á–µ–Ω –≤ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
# –∏ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–ª—è –≤—Å–µ—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π –∏–ª–∏ –±–µ–∑ —Å–æ—Å—Ç–æ—è–Ω–∏–π, –∫—Ä–æ–º–µ —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏—Ö.
# –í –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ, –¥–æ–±–∞–≤–∏–º –µ–≥–æ –≤ start_handlers, —Ç.–∫. –æ–Ω —Å–≤—è–∑–∞–Ω —Å –Ω–∞—á–∞–ª—å–Ω—ã–º –º–µ–Ω—é –∏ –æ—Ç–º–µ–Ω–æ–π.
# Removed the handler for callback "main_menu" to delete the menu as requested
@router.message(F.text.lower() == "–æ—Ç–º–µ–Ω–∞", StateFilter("*")) # –°—Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ —Ç–µ–∫—Å—Ç "–æ—Ç–º–µ–Ω–∞" –≤ –ª—é–±–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
async def cancel_fsm_process(callback_or_message: Union[Message, CallbackQuery], state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É –∏–ª–∏ callback –¥–ª—è –æ—Ç–º–µ–Ω—ã —Ç–µ–∫—É—â–µ–≥–æ FSM –ø—Ä–æ—Ü–µ—Å—Å–∞.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.
    """
    current_state = await state.get_state()
    if current_state is None:
        # –ï—Å–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –Ω–µ—Ç, –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (–¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤–æ–π –∫–æ–º–∞–Ω–¥—ã)
        if isinstance(callback_or_message, Message):
             await callback_or_message.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –æ—Ç–º–µ–Ω—ã.", reply_markup=main_menu_keyboard())
        else: # –ï—Å–ª–∏ —ç—Ç–æ CallbackQuery –±–µ–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è, –ø—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—á–∞–µ–º –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é
             await callback_or_message.message.edit_text("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –æ—Ç–º–µ–Ω—ã.", reply_markup=main_menu_keyboard())
             await callback_or_message.answer() # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback

        return # –í—ã—Ö–æ–¥–∏–º, –µ—Å–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –Ω–µ –±—ã–ª–æ

    logger.info(f"Cancelling FSM process. User ID: {callback_or_message.from_user.id}, State: {current_state}")

    await state.clear() # –û—á–∏—â–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM

    message_text = "–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞."
    reply_markup = main_menu_keyboard()

    if isinstance(callback_or_message, CallbackQuery):
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ callback'–∞, –µ—Å–ª–∏ —ç—Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ
            await callback_or_message.message.edit_text(message_text, reply_markup=reply_markup)
        except TelegramAPIError:
             # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º —Å—Ç–∞—Ä–æ–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
             await callback_or_message.message.answer(message_text, reply_markup=reply_markup)

        await callback_or_message.answer("–û—Ç–º–µ–Ω–µ–Ω–æ") # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback

    else: # –≠—Ç–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ "–æ—Ç–º–µ–Ω–∞"
        await callback_or_message.answer(message_text, reply_markup=reply_markup)

@router.message(StateFilter("*"))
async def handle_unexpected_message(message: Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state:
        await message.answer(f"–ë–æ—Ç –æ–∂–∏–¥–∞–µ—Ç –¥—Ä—É–≥–æ–π –≤–≤–æ–¥ –≤ —Ç–µ–∫—É—â–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ ({current_state}).\n"
                             "–î–ª—è –æ—Ç–º–µ–Ω—ã —Ç–µ–∫—É—â–µ–π –æ–ø–µ—Ä–∞—Ü–∏–∏ –Ω–∞–∂–º–∏—Ç–µ '‚ùå –û—Ç–º–µ–Ω–∞'.")
    else:
        # –ï—Å–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –Ω–µ—Ç, —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –±–æ—Ç –Ω–µ –ø–æ–Ω–∏–º–∞–µ—Ç
        await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –ø–æ–Ω—è–ª –≤–∞—à—É –∫–æ–º–∞–Ω–¥—É. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é.")

@router.callback_query(F.data == "export_data")
async def export_data_handler(callback: CallbackQuery, state: FSMContext):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="Excel (.xlsx)", callback_data="export_format:xlsx"),
            InlineKeyboardButton(text="CSV (.csv)", callback_data="export_format:csv"),
        ],
        [
            InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")
        ]
    ])
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –≤—ã–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:", reply_markup=keyboard)
    await state.set_state("export_select_format")

@router.callback_query(F.data.startswith("export_format:"))
async def export_format_handler(callback: CallbackQuery, state: FSMContext):
    format_selected = callback.data.split(":")[1]
    data = await fetch_truetabs_data(callback.from_user.id)
    if data is None:
        await callback.message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ True Tabs.")
        await callback.answer()
        return

    if format_selected == "csv":
        file_bytes = convert_to_csv_bytes(data)
        file_name = "exported_data.csv"
    else:
        file_bytes = convert_to_excel_bytes(data)
        file_name = "exported_data.xlsx"

    file = FSInputFile(io.BytesIO(file_bytes), filename=file_name)
    await callback.message.answer_document(file)
    await callback.message.edit_text("–í—ã–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.", reply_markup=main_menu_keyboard())
    await state.clear()
    await callback.answer()

@router.callback_query(F.data == "update_data")
async def update_data_handler(callback: CallbackQuery):
    success = await send_update_to_truetabs(callback.from_user.id)
    if success:
        await callback.message.answer("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã —á–µ—Ä–µ–∑ API.")
    else:
        await callback.message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ API.")
    await callback.message.edit_text("–û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu_keyboard())
    await callback.answer()

async def fetch_truetabs_data(user_id: int):
    tt_config = await get_tt_config(user_id)
    if not tt_config:
        return None
    api_token = decrypt_data(tt_config['api_token'])
    datasheet_id = tt_config['datasheet_id']

    url = f"https://true.tabs.sale/fusion/v1/datasheets/{datasheet_id}/records?viewId=viwyshvXsylyv&fieldKey=name"
    headers = {
        "Authorization": f"Bearer {api_token}",
    }
    async with httpx.AsyncClient() as client:
        try:
            response = await client.get(url, headers=headers)
            response.raise_for_status()
            return response.json()
        except Exception:
            return None

def convert_to_csv_bytes(data):
    output = io.StringIO()
    writer = csv.writer(output)
    records = data.get('records', [])
    if not records:
        return b""
    headers = records[0]['fields'].keys()
    writer.writerow(headers)
    for record in records:
        writer.writerow([record['fields'].get(h, "") for h in headers])
    return output.getvalue().encode('utf-8')

def convert_to_excel_bytes(data):
    import openpyxl
    from openpyxl.utils import get_column_letter

    wb = openpyxl.Workbook()
    ws = wb.active
    records = data.get('records', [])
    if not records:
        return b""
    headers = list(records[0]['fields'].keys())
    ws.append(headers)
    for record in records:
        ws.append([record['fields'].get(h, "") for h in headers])
    for i, _ in enumerate(headers, 1):
        ws.column_dimensions[get_column_letter(i)].width = 20
    output = io.BytesIO()
    wb.save(output)
    return output.getvalue()

async def send_update_to_truetabs(user_id: int):
    tt_config = await get_tt_config(user_id)
    if not tt_config:
        return False
    api_token = decrypt_data(tt_config['api_token'])
    datasheet_id = tt_config['datasheet_id']

    url = f"https://true.tabs.sale/fusion/v1/datasheets/{datasheet_id}/records?viewId=viwyshvXsylyv&fieldKey=name"
    headers = {
        "Authorization": f"Bearer {api_token}",
        "Content-Type": "application/json"
    }
    payload = {
        "records": [],
        "fieldKey": "name"
    }
    async with httpx.AsyncClient() as client:
        try:
            response = await client.patch(url, headers=headers, json=payload)
            response.raise_for_status()
            return True
        except Exception:
            return False
